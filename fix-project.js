const fs = require('fs');
const { execSync } = require('child_process');
const path = require('path');

// Chemin vers le package.json
const packageJsonPath = path.join(__dirname, 'package.json');

console.log('üîç Analyse du projet KSmall...');

try {
  // Lire le package.json actuel
  const packageJson = JSON.parse(fs.readFileSync(packageJsonPath, 'utf8'));

  // 1. Corriger le point d'entr√©e
  packageJson.main = 'index.js';
  console.log('‚úÖ Point d\'entr√©e d√©fini sur "index.js"');

  // 2. Fixer les versions des d√©pendances probl√©matiques pour Expo SDK 48
  const dependencies = packageJson.dependencies;
  
  // Versions correctes pour Expo SDK 48
  const correctVersions = {
    'expo': '~48.0.18',
    'expo-random': '~13.1.1',
    'expo-web-browser': '~12.1.1',
    'react': '18.2.0',
    'react-native': '0.71.8',
  };

  // Mettre √† jour les versions
  Object.keys(correctVersions).forEach(pkg => {
    if (dependencies[pkg]) {
      dependencies[pkg] = correctVersions[pkg];
      console.log(`‚úÖ Version de ${pkg} fix√©e √† ${correctVersions[pkg]}`);
    }
  });

  // 3. Supprimer les d√©pendances probl√©matiques
  const packagesToRemove = ['@react-native-metro-config'];
  packagesToRemove.forEach(pkg => {
    if (dependencies[pkg]) {
      delete dependencies[pkg];
      console.log(`‚úÖ Suppression de la d√©pendance probl√©matique: ${pkg}`);
    }
  });

  // 4. Mettre √† jour les devDependencies
  const devDependencies = packageJson.devDependencies;
  devDependencies['metro-config'] = '0.76.7';
  console.log('‚úÖ Version de metro-config fix√©e √† 0.76.7');

  // 5. Mise √† jour des scripts pour inclure les commandes correctes
  packageJson.scripts = {
    ...packageJson.scripts,
    'start': 'expo start',
    'clear-cache': 'expo start --clear',
    'debug': 'expo start --dev-client',
    'android-clear': 'expo start --android --clear'
  };
  console.log('‚úÖ Scripts de d√©marrage mis √† jour');

  // 6. √âcrire le package.json mis √† jour
  fs.writeFileSync(packageJsonPath, JSON.stringify(packageJson, null, 2));
  console.log('‚úÖ Fichier package.json mis √† jour');

  // 7. S'assurer que les fichiers d'entr√©e sont correctement configur√©s
  const indexJsPath = path.join(__dirname, 'index.js');
  const appJsPath = path.join(__dirname, 'app.js');
  const appEntryJsPath = path.join(__dirname, 'AppEntry.js');

  // V√©rifier/cr√©er index.js
  const indexJsContent = `import { registerRootComponent } from 'expo';
import App from './App';

// Point d'entr√©e de l'application Expo
registerRootComponent(App);`;
  fs.writeFileSync(indexJsPath, indexJsContent);
  console.log('‚úÖ Fichier index.js cr√©√©/mis √† jour');

  // Cr√©er une copie de sauvegarde en app.js au cas o√π
  fs.writeFileSync(appJsPath, indexJsContent);
  console.log('‚úÖ Fichier app.js cr√©√© comme sauvegarde');

  // Supprimer AppEntry.js s'il existe pour √©viter la confusion
  if (fs.existsSync(appEntryJsPath)) {
    fs.unlinkSync(appEntryJsPath);
    console.log('‚úÖ Fichier AppEntry.js supprim√© pour √©viter les conflits');
  }

  // 8. Cr√©er un fichier metro.config.js simplifi√©
  const metroConfigPath = path.join(__dirname, 'metro.config.js');
  const simplifiedMetroConfig = `const { getDefaultConfig } = require('expo/metro-config');

// Cr√©er la configuration par d√©faut
const config = getDefaultConfig(__dirname);

// Am√©liorer la r√©solution des modules
config.resolver = {
  ...config.resolver,
  sourceExts: [...config.resolver.sourceExts, 'mjs', 'cjs']
};

// Ajouter le dossier racine aux watchFolders
config.watchFolders = [__dirname];

module.exports = config;`;
  
  fs.writeFileSync(metroConfigPath, simplifiedMetroConfig);
  console.log('‚úÖ Fichier metro.config.js simplifi√© cr√©√©');

  // 9. Nettoyer les caches manuellement
  console.log('üßπ Nettoyage des caches...');
  try {
    // Supprimer le dossier de cache de node_modules
    const cacheDir = path.join(__dirname, 'node_modules', '.cache');
    if (fs.existsSync(cacheDir)) {
      fs.rmSync(cacheDir, { recursive: true, force: true });
    }
    console.log('‚úÖ Cache node_modules/.cache supprim√©');
    
    // Supprimer le dossier .expo
    const expoDir = path.join(__dirname, '.expo');
    if (fs.existsSync(expoDir)) {
      fs.rmSync(expoDir, { recursive: true, force: true });
    }
    console.log('‚úÖ Dossier .expo supprim√©');
  } catch (e) {
    console.warn('‚ö†Ô∏è Impossible de supprimer certains caches:', e.message);
  }

  console.log('\n‚ú® Configuration du projet termin√©e avec succ√®s!');
  console.log('\nüìã √âtapes suivantes recommand√©es:');
  console.log('1. Ex√©cutez: npm install');
  console.log('2. Puis: npm run clear-cache');

} catch (error) {
  console.error('‚ùå Une erreur est survenue:', error);
  process.exit(1);
}