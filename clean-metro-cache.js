/**
 * Script pour nettoyer le cache de Metro et r√©soudre les probl√®mes de bundling
 */

const { execSync } = require('child_process');
const fs = require('fs');
const path = require('path');
const os = require('os');

console.log('üßπ Nettoyage du cache Metro et des fichiers temporaires...');

// Chemins √† nettoyer
const pathsToClean = [
  path.join(__dirname, 'node_modules', '.cache'),
  path.join(__dirname, '.expo'),
  path.join(__dirname, '.gradle'),
  path.join(os.tmpdir(), 'metro-*'),
  path.join(os.tmpdir(), 'haste-map-*'),
  path.join(os.tmpdir(), 'react-*'),
  path.join(os.homedir(), '.gradle', 'caches', 'transforms-*'),
];

// Fonction pour supprimer un r√©pertoire de mani√®re r√©cursive
function deleteFolderRecursive(folderPath) {
  if (fs.existsSync(folderPath)) {
    try {
      fs.rmSync(folderPath, { recursive: true, force: true });
      console.log(`‚úì Supprim√©: ${folderPath}`);
    } catch (err) {
      console.error(`‚ùå Erreur lors de la suppression de ${folderPath}:`, err);
    }
  }
}

// Nettoyer les chemins list√©s
pathsToClean.forEach(pathPattern => {
  if (pathPattern.includes('*')) {
    // Pour les patterns avec wildcard, utiliser une recherche approch√©e
    const dirName = path.dirname(pathPattern);
    const baseName = path.basename(pathPattern);
    const pattern = new RegExp(baseName.replace('*', '.*'));
    
    if (fs.existsSync(dirName)) {
      fs.readdirSync(dirName).forEach(file => {
        if (pattern.test(file)) {
          const fullPath = path.join(dirName, file);
          deleteFolderRecursive(fullPath);
        }
      });
    }
  } else {
    // Pour les chemins sans wildcard, supprimer directement
    deleteFolderRecursive(pathPattern);
  }
});

// Nettoyer le cache et les d√©pendances probl√©matiques
console.log('üßπ Suppression des fichiers de cache...');

try {
  execSync('npx expo-cli start --clear', { stdio: 'inherit' });
  console.log('‚úÖ Cache Expo nettoy√©');
} catch (error) {
  console.log('‚ö†Ô∏è Impossible de nettoyer le cache Expo, essai avec la m√©thode alternative...');
  try {
    execSync('npx react-native start --reset-cache', { stdio: 'inherit' });
    console.log('‚úÖ Cache React Native nettoy√©');
  } catch (innerError) {
    console.error('‚ùå √âchec du nettoyage du cache:', innerError);
  }
}

console.log('üîç V√©rification des d√©pendances circulaires...');

// Nettoyer watchman qui peut aussi causer des probl√®mes de cache
try {
  execSync('watchman watch-del-all', { stdio: 'inherit' });
  console.log('‚úÖ Configuration Watchman r√©initialis√©e');
} catch (error) {
  console.log('‚ÑπÔ∏è Watchman non install√© ou non disponible, ignor√©');
}

console.log('\nüéâ Nettoyage termin√©! Ex√©cutez maintenant votre application avec:');
console.log('  npx expo start --clear');
console.log('  ou');
console.log('  npx react-native run-android --verbose');