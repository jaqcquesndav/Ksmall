const { execSync } = require('child_process');
const fs = require('fs');
const path = require('path');
const os = require('os');

console.log('üöÄ Configuration de l\'environnement de d√©veloppement KSMall...');

// V√©rifier si npm est disponible
try {
  console.log('V√©rifiant la version de npm...');
  execSync('npm --version', { stdio: 'inherit' });
} catch (e) {
  console.error('‚ùå npm n\'est pas install√© ou accessible. Veuillez l\'installer et r√©essayer.');
  process.exit(1);
}

// Cr√©er le fichier .npmrc s'il n'existe pas
const npmrcPath = path.join(__dirname, '.npmrc');
if (!fs.existsSync(npmrcPath)) {
  console.log('üìù Cr√©ation du fichier .npmrc avec legacy-peer-deps...');
  fs.writeFileSync(npmrcPath, 'legacy-peer-deps=true\n');
} else {
  console.log('‚úÖ Fichier .npmrc trouv√©');
  // V√©rifier et ajouter legacy-peer-deps si n√©cessaire
  const npmrcContent = fs.readFileSync(npmrcPath, 'utf8');
  if (!npmrcContent.includes('legacy-peer-deps=true')) {
    fs.appendFileSync(npmrcPath, '\nlegacy-peer-deps=true\n');
    console.log('üìù Ajout de legacy-peer-deps au fichier .npmrc existant');
  }
}

// Installer les d√©pendances avec les flags appropri√©s
try {
  console.log('üì¶ Installation des d√©pendances avec legacy-peer-deps...');
  execSync('npm install --legacy-peer-deps', { stdio: 'inherit' });
  console.log('‚úÖ D√©pendances install√©es avec succ√®s!');
} catch (e) {
  console.error('‚ùå Erreur lors de l\'installation des d√©pendances:', e);
  console.log('\nüîç Tentative alternative avec --force...');
  
  try {
    execSync('npm install --force', { stdio: 'inherit' });
    console.log('‚úÖ D√©pendances install√©es avec succ√®s en utilisant --force!');
  } catch (e2) {
    console.error('‚ùå L\'installation a √©chou√© m√™me avec --force:', e2);
    console.log('\nüëâ Recommandations:');
    console.log('1. Essayez de nettoyer le cache npm: npm cache clean --force');
    console.log('2. Supprimez le dossier node_modules et r√©essayez');
    console.log('3. Consultez le rapport d\'erreur pour plus de d√©tails');
    process.exit(1);
  }
}

// V√©rifier la cr√©ation du dossier assets si n√©cessaire
const assetsDir = path.join(__dirname, 'assets');
if (!fs.existsSync(assetsDir)) {
  console.log('üìÅ Cr√©ation du dossier assets...');
  fs.mkdirSync(assetsDir);
  
  // Cr√©ation de fichiers d'assets de base
  console.log('üñº G√©n√©ration des fichiers d\'assets par d√©faut...');
  
  // Cr√©er un fichier image de base (un rectangle color√© comme placeholder)
  const createPlaceholderImage = (filename, color = '#6200EE') => {
    // Cette fonction est un placeholder - normalement nous utiliserions 
    // une biblioth√®que pour g√©n√©rer des images r√©elles
    console.log(`   - Cr√©ation de ${filename} (placeholder)`);
    fs.writeFileSync(
      path.join(assetsDir, filename),
      `Placeholder pour ${filename}. Ce n'est pas une v√©ritable image.`
    );
  };
  
  createPlaceholderImage('icon.png');
  createPlaceholderImage('splash.png');
  createPlaceholderImage('adaptive-icon.png');
  createPlaceholderImage('favicon.png');
}

console.log('\nüéâ Configuration termin√©e! Vous pouvez maintenant d√©marrer l\'application:');
console.log('   npx expo start');
